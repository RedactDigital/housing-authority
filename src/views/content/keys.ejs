<div class="row">
    <div class="col s10 m4">
        <h5 style="margin-bottom: 0;">
            <%- title %>
                <% for( let i=0; i < navLinks.length; i++ ) { %>
                    <% if (navLinks[i].active) { %>
                        â€“ <%= navLinks[i].name %>
                            <% } %>
                                <% } %>

        </h5>
        <p style="margin-top: .5em; margin-bottom: 2em;">
            <%- description %>
        </p>
    </div>
    <div id="addKeyButton" style="margin: 1.8em 0 0 0" class="col s2 m8 right">
        <button onclick="createForm()" class="btn-floating waves-effect waves-light blue-grey right">
            <i class="material-icons">add</i>
        </button>
    </div>
</div>
<div class="row">
    <form action="/create" method="post" id="key-form"></form>
</div>
<div class="row">
    <div class="input-field col s6">
        <input id="search" onkeyup="search()" type="text" class="validate">
        <label for="search">Search</label>
    </div>
    <div class="input-field col s6">
        <select id="pageSize" onchange="updatePageSize(value)">
            <option value="10">Show 10 rows</option>
            <option value="25">Show 25 rows</option>
            <option value="50">Show 50 rows</option>
            <option value="100">Show 100 rows</option>
            <option value="all">Show all rows</option>
        </select>
    </div>
</div>
<div class="row">
    <table id="table" class="striped highlight dense">
        <thead>
            <tr class="blue-grey">
                <th>Key Tag Number</th>
                <th>Door Number</th>
                <th>Door Location</th>
                <th class="hide-on-med-and-down">Description</th>
                <th>Lock Pin Number</th>
                <th class="center">Actions</th>
            </tr>
        </thead>
        <tbody>
            <% for( let i=0; i < keys.length; i++ ) { %>
                <tr style="display: none;">
                    <td class="id">
                        <%= keys[i].id %>
                    </td>
                    <td width="10%" class="key">
                        <%= keys[i].key %>
                    </td>
                    <td width="10%" class="room">
                        <%= keys[i].doorNumber %>
                    </td>
                    <td width="15%" class="building">
                        <%= keys[i].doorLocation %>
                    </td>
                    <td width="40%" class="text-overflow description hide-on-med-and-down">
                        <p>
                            <%= keys[i].description %>
                        </p>
                    </td>
                    <td width="15%" class="lockNumber">
                        <%= keys[i].lockNumber %>
                    </td>
                    <td width="10%" class="center">
                        <i class="material-icons">edit</i>
                        <a href="/delete/<%= keys[i].id %> "><i class="material-icons">delete_forever</i></a>
                    </td>
                </tr>
                <% } %>
        </tbody>
    </table>
    <div class="row" style="padding: 0 0 3em 0">
        <a onclick="previous()" class="btn btn-small waves-effect waves-light blue-grey ">Back</a>
        <span id="currentPage" style="margin-left: 38%;"></span>
        <a onclick="next()" class="btn btn-small waves-effect waves-light blue-grey right">Next</a>
    </div>
</div>

<style>
    .row {
        margin-top: 1.2em;
        margin-bottom: 0;
    }

    .text-overflow {
        width: 150px;
    }

    .text-overflow p {
        max-width: 325px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    th {
        font-size: 1.1em;
        border-radius: 0;
        padding: 0.5em;
    }

    td {
        font-size: 1em;
        border-radius: 0;
        padding: 0 0.5em;
    }

    th[role=columnheader]:not(.no-sort) {
        cursor: pointer;
    }

    th[role=columnheader]:not(.no-sort):after {
        content: '';
        float: right;
        margin-top: 7px;
        border-width: 0 4px 4px;
        border-style: solid;
        border-color: #404040 transparent;
        visibility: hidden;
        opacity: 0;
        -ms-user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
    }

    th[aria-sort=ascending]:not(.no-sort):after {
        border-bottom: none;
        border-width: 4px 4px 0;
    }

    th[aria-sort]:not(.no-sort):after {
        visibility: visible;
        opacity: 0.4;
    }

    th[role=columnheader]:not(.no-sort):hover:after {
        visibility: visible;
        opacity: 1;
    }
</style>

<script src="tablesort.js"></script>
<script>
    new Tablesort(document.getElementById('table'));

    let keys = getKeys();
    let page = 1;
    let pageSize = document.querySelector('#pageSize') ? document.querySelector('#pageSize').value : 10;
    let numberOfPages = Math.ceil(keys.length / pageSize);

    window.onload = function () {
        displayKeys(page);
    };

    document.addEventListener('DOMContentLoaded', function () {
        let options = document.querySelectorAll('#pageSize option');
        var elems = document.querySelectorAll('select');
        var instances = M.FormSelect.init(elems, options);
    });

    function createForm() {
        let form = document.getElementById('key-form');
        let html = `
        <div class="row">
          <div class="input-field col s12 m4">
            <input id="key" type="text" class="validate" name="key">
            <label for="key">Key Number</label>
          </div>
          <div class="input-field col s12 m4">
            <input id="doorNumber" type="text" class="validate" name="doorNumber">
            <label for="doorNumber">Door Number</label>
          </div>
          <div class="input-field col s12 m4">
            <input id="lockNumber" type="text" class="validate" name="lockNumber">
            <label for="lockNumber">Lock Number</label>
          </div>
        </div>
        <div class="row">
          <div class="input-field col s12 m4">
            <input id="doorLocation" type="text" class="validate" name="doorLocation">
            <label for="doorLocation">Door Location</label>
          </div>
          <div class="input-field col s12 m4">
            <textarea id="description" class="materialize-textarea" name="description"></textarea>
            <label for="description">Description</label>
          </div>
          <div class="col s12 m4">
            <button style="margin: 1.5em 0 1.5em 0" class="btn waves-effect waves-light right blue-grey">Submit
              <i class="material-icons right">send</i>
            </button>
          </div>
        </div>
        `;
        form.innerHTML = html;

        // remove addKeyButton
        let addKeyButton = document.getElementById('addKeyButton');
        addKeyButton.remove();
    }

    function next() {
        if (page < numberOfPages) {
            page++;
            displayKeys();
        }
    }

    function previous() {
        if (page > 1) {
            page--;
            displayKeys();
        }
    }

    function updatePageSize() {
        pageSize = document.querySelector('#pageSize').value;
        if (pageSize === 'all') pageSize = keys.length;
        numberOfPages = Math.ceil(keys.length / pageSize);
        page = 1;
        displayKeys();
    }

    function getKeys() {
        const table = document.getElementById("table").getElementsByTagName("tbody")[0];
        const rows = table.getElementsByTagName("tr");
        let keys = [];
        let key = {};

        for (let i = 0; i < rows.length; i++) {
            key = {};
            key.id = rows[i].getElementsByClassName("id")[0].innerText.replace(/^\s+|\s+$|\s+(?=\s)/g, "");
            key.key = rows[i].getElementsByClassName("key")[0].innerText.replace(/^\s+|\s+$|\s+(?=\s)/g, "");
            key.room = rows[i].getElementsByClassName("room")[0].innerText.replace(/^\s+|\s+$|\s+(?=\s)/g, "");
            key.building = rows[i].getElementsByClassName("building")[0].innerText.replace(/^\s+|\s+$|\s+(?=\s)/g, "");
            key.description = rows[i].getElementsByClassName("description")[0].innerText.replace(/^\s+|\s+$|\s+(?=\s)/g, "");
            key.lockNumber = rows[i].getElementsByClassName("lockNumber")[0].innerText.replace(/^\s+|\s+$|\s+(?=\s)/g, "");
            keys.push(key);
        }
        return keys;
    }

    function displayKeys() {
        const table = document.getElementById("table").getElementsByTagName("tbody")[0];
        let html = "";

        let start = (page - 1) * parseInt(pageSize);
        let end = start + parseInt(pageSize);
        if (end > keys.length) {
            end = keys.length;
        }

        for (let i = start; i < end; i++) {
            html += `
            <tr>
                <td class="key" width="10%">${ keys[i].key }</td>
                <td class="room" width="10%">${ keys[i].room }</td>
                <td class="building" width="15%">${ keys[i].building }</td>
                <td class="text-overflow description hide-on-med-and-down" width="40%">
                    <p>${ keys[i].description }</p>
                </td>
                <td class="lockNumber" width="15%">${ keys[i].lockNumber }</td>
                <td class="center" width="10%">
                    <form method="post" action="/edit/${ keys[i].id }" style="padding:0;margin:0;display:inline">
                        <button  class="btn-flat" style="padding:0" type="submit">
                        <i class="material-icons">edit</i>
                    </button>
                    </form>                
                    <form method="post" action="/delete/${ keys[i].id }" style="padding:0;margin:0;display:inline">
                        <button  class="btn-flat" type="submit" style="padding:0">
                        <i class="material-icons red-text">delete_forever</i>
                    </button>
                    </form>

                </td>
            </tr>
            `;
        }
        table.innerHTML = html;
        let currentPage = document.getElementById('currentPage');
        currentPage.innerHTML = `${ page } of ${ numberOfPages } pages`;
    }

    function editKey() {

    }

    function search() {
        const input = document.getElementById("search");
        const filter = input.value.toUpperCase();
        const table = document.getElementById("table").getElementsByTagName("tbody")[0];
        const rows = table.getElementsByTagName("tr");

        // let start = performance.now();
        // // Loop through all table rows, and hide those who don't match the search query
        // for (i = 0; i < rows.length; i++) {
        //   for (let j = 0; j < rows[i].childNodes.length; j++) {
        //     const tds = rows[i].getElementsByTagName("td")[j];
        //     if (tds) {
        //       txtValue = tds.textContent || tds.innerText;
        //       if (txtValue.toUpperCase().indexOf(filter) > -1) {
        //         rows[i].style.display = "";
        //         break;
        //       } else {
        //         rows[i].style.display = "none";
        //       }
        //     }
        //   }
        // }
        // let end = performance.now();

        // console.log(end - start);

        let map = {};
        for (i = 0; i < rows.length; i++) {
            if (!map[rows[i].childNodes]) {
                const item = rows[i].childNodes;
                map[item] = true;
            }
        }

        for (i = 0; i < rows.length; i++) {
            const textValue = rows[i].textContent || rows[i].innerText;
            if (textValue.toUpperCase().indexOf(filter) > -1) {
                rows[i].style.display = "";
            } else {
                rows[i].style.display = "none";
            }
        }

    }
</script>